'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var createWrite = require('pull-write');
var pull = require('pull-stream');

module.exports = function () {
  function MemoryBlobStore() {
    _classCallCheck(this, MemoryBlobStore);

    this.store = {};
  }

  _createClass(MemoryBlobStore, [{
    key: 'write',
    value: function write(key, cb) {
      var _this = this;

      cb = cb || function () {};

      if (!key) {
        return cb(new Error('Missing key'));
      }

      this.store[key] = new Buffer([]);

      return createWrite(function (data, cb) {
        _this.store[key] = Buffer.concat([_this.store[key]].concat(data));
        cb();
      }, null, 100, cb);
    }
  }, {
    key: 'read',
    value: function read(key) {
      if (!key) {
        return pull.error(new Error('Missing key'));
      }

      var place = this.store[key];
      if (place) {
        return pull.values([this.store[key]]);
      }

      return pull.error(new Error('Unkown key ' + key));
    }
  }, {
    key: 'exists',
    value: function exists(key, cb) {
      cb = cb || function () {};

      if (!key) {
        return cb(new Error('Missing key'));
      }

      cb(null, Boolean(this.store[key]));
    }
  }, {
    key: 'remove',
    value: function remove(key, cb) {
      cb = cb || function () {};

      if (!key) {
        return cb(new Error('Missing key'));
      }

      delete this.store[key];
      cb();
    }
  }]);

  return MemoryBlobStore;
}();