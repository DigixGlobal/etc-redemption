'use strict';

var bs58 = require('bs58');
var debug = require('debug');
var log = debug('http-api:files');
log.error = debug('http-api:files:error');

exports = module.exports;

// common pre request handler that parses the args and returns `key` which is assigned to `request.pre.args`
exports.parseKey = function (request, reply) {
  if (!request.query.arg) {
    return reply("Argument 'key' is required").code(400).takeover();
  }

  try {
    return reply({
      key: new Buffer(bs58.decode(request.query.arg))
    });
  } catch (err) {
    log.error(err);
    return reply({
      Message: 'invalid ipfs ref path',
      Code: 0
    }).code(500).takeover();
  }
};

exports.cat = {
  // uses common parseKey method that returns a `key`
  parseArgs: exports.parseKey,

  // main route handler which is called after the above `parseArgs`, but only if the args were valid
  handler: function handler(request, reply) {
    var key = request.pre.args.key;

    request.server.app.ipfs.files.cat(key, function (err, stream) {
      if (err) {
        log.error(err);
        return reply({
          Message: 'Failed to cat file: ' + err,
          Code: 0
        }).code(500);
      }
      stream.on('data', function (data) {
        return reply(data);
      });
    });
  }
};