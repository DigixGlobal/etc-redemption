'use strict';

var Command = require('ronin').Command;
var debug = require('debug');
var get = require('lodash.get');
var set = require('lodash.set');
var log = debug('cli:config');
log.error = debug('cli:config:error');
var utils = require('../utils');

module.exports = Command.extend({
  desc: 'Get and set IPFS config values',

  options: {
    bool: {
      type: 'boolean',
      default: false
    },
    json: {
      type: 'boolean',
      default: false
    }
  },

  run: function run(bool, json, key, value) {
    if (!key) {
      throw new Error("argument 'key' is required");
    }

    utils.getIPFS(function (err, ipfs) {
      if (err) {
        throw err;
      }

      if (!value) {
        // Get the value of a given key

        if (utils.isDaemonOn()) {
          return ipfs.config.get(key, function (err, config) {
            if (err) {
              log.error(err);
              throw new Error('failed to read the config');
            }

            console.log(config.Value);
          });
        }

        ipfs.config.show(function (err, config) {
          if (err) {
            log.error(err);
            throw new Error('failed to read the config');
          }

          var value = get(config, key);
          console.log(value);
        });
      } else {
        // Set the new value of a given key

        if (bool) {
          value = value === 'true';
        } else if (json) {
          try {
            value = JSON.parse(value);
          } catch (err) {
            log.error(err);
            throw new Error('invalid JSON provided');
          }
        }

        if (utils.isDaemonOn()) {
          return ipfs.config.set(key, value, function (err) {
            if (err) {
              log.error(err);
              throw new Error('failed to save the config');
            }
          });
        }

        ipfs.config.show(function (err, originalConfig) {
          if (err) {
            log.error(err);
            throw new Error('failed to read the config');
          }

          var updatedConfig = set(originalConfig, key, value);
          ipfs.config.replace(updatedConfig, function (err) {
            if (err) {
              log.error(err);
              throw new Error('failed to save the config');
            }
          });
        });
      }
    });
  }
});