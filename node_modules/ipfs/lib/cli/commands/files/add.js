'use strict';

var Command = require('ronin').Command;
var utils = require('../../utils');
var debug = require('debug');
var log = debug('cli:version');
log.error = debug('cli:version:error');
var bs58 = require('bs58');
var fs = require('fs');
var parallelLimit = require('run-parallel-limit');
var path = require('path');
var glob = require('glob');

function checkPath(inPath, recursive) {
  // This function is to check for the following possible inputs
  // 1) "." add the cwd but throw error for no recursion flag
  // 2) "." -r return the cwd
  // 3) "/some/path" but throw error for no recursion
  // 4) "/some/path" -r
  // 5) No path, throw err
  // 6) filename.type return the cwd + filename

  if (!inPath) {
    throw new Error('Error: Argument \'path\' is required');
  }

  if (inPath === '.') {
    inPath = process.cwd();
  }

  if (fs.statSync(inPath).isDirectory() && recursive === false) {
    throw new Error('Error: ' + inPath + ' is a directory, use the \'-r\' flag to specify directories');
  }

  return inPath;
}

module.exports = Command.extend({
  desc: 'Add a file to IPFS using the UnixFS data format',

  options: {
    recursive: {
      alias: 'r',
      type: 'boolean',
      default: false
    }
  },

  run: function run(recursive, inPath) {
    var rs = void 0;

    inPath = checkPath(inPath, recursive);

    glob(path.join(inPath, '/**/*'), function (err, res) {
      if (err) {
        throw err;
      }
      utils.getIPFS(function (err, ipfs) {
        if (err) {
          throw err;
        }
        ipfs.files.createAddStream(function (err, i) {
          if (err) throw err;
          var filePair;
          i.on('data', function (file) {
            console.log('added', bs58.encode(file.node.multihash()).toString(), file.path);
          });
          i.once('end', function () {
            return;
          });
          if (res.length !== 0) {
            (function () {
              var index = inPath.lastIndexOf('/');
              parallelLimit(res.map(function (element) {
                return function (callback) {
                  if (!fs.statSync(element).isDirectory()) {
                    i.write({
                      path: element.substring(index + 1, element.length),
                      content: fs.createReadStream(element)
                    });
                  }
                  callback();
                };
              }), 10, function (err) {
                if (err) {
                  throw err;
                }
                i.end();
              });
            })();
          } else {
            rs = fs.createReadStream(inPath);
            inPath = inPath.substring(inPath.lastIndexOf('/') + 1, inPath.length);
            filePair = { path: inPath, content: rs };
            i.write(filePair);
            i.end();
          }
        });
      });
    });
  }
});