'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Dexie = require('dexie');
var _write = require('pull-write');
var pushable = require('pull-pushable');
var toBuffer = require('typedarray-to-buffer');
var defer = require('pull-defer/sink');
var toWindow = require('pull-window').recent;
var pull = require('pull-stream');

module.exports = function () {
  function IdbBlobStore(dbname) {
    _classCallCheck(this, IdbBlobStore);

    this.path = dbname || 'pull-blob-store-' + Math.random().toString().slice(2, 10);

    this.db = new Dexie(this.path);

    // Setup database
    this.db.version(1).stores(_defineProperty({}, this.path, '++,key,blob'));
  }

  _createClass(IdbBlobStore, [{
    key: 'write',
    value: function write(key, cb) {
      var _this = this;

      cb = cb || function () {};
      var d = defer();

      if (!key) {
        cb(new Error('Missing key'));

        return d;
      }

      this.remove(key, function (err) {
        if (err) {
          return cb(err);
        }

        var table = _this.table;

        d.resolve(pull(toWindow(100, 10), _write(writer, reduce, 100, cb)));

        function writer(data, cb) {
          var blobs = data.map(function (blob) {
            return {
              key: key,
              blob: blob
            };
          });

          table.bulkPut(blobs).then(function () {
            return cb();
          }).catch(cb);
        }

        function reduce(queue, data) {
          queue = queue || [];
          if (!Array.isArray(data)) {
            data = [data];
          }

          data = data.map(ensureBuffer);

          if (!queue.length || last(queue).length > 99) {
            queue.push(Buffer.concat(data));
          } else {
            queue[lastIndex(queue)] = Buffer.concat(last(queue).concat(data));
          }

          return queue;
        }
      });

      return d;
    }
  }, {
    key: 'read',
    value: function read(key) {
      var _this2 = this;

      var p = pushable();

      if (!key) {
        p.end(new Error('Missing key'));

        return p;
      }

      this.exists(key, function (err, exists) {
        if (err) {
          return p.end(err);
        }

        if (!exists) {
          return p.end(new Error('Not found'));
        }

        _this2.table.where('key').equals(key).each(function (val) {
          return p.push(toBuffer(val.blob));
        }).catch(function (err) {
          return p.end(err);
        }).then(function () {
          return p.end();
        });
      });

      return p;
    }
  }, {
    key: 'exists',
    value: function exists(key, cb) {
      cb = cb || function () {};

      if (!key) {
        return cb(new Error('Missing key'));
      }

      this.table.where('key').equals(key).count().then(function (val) {
        return cb(null, Boolean(val));
      }).catch(cb);
    }
  }, {
    key: 'remove',
    value: function remove(key, cb) {
      cb = cb || function () {};

      if (!key) {
        return cb(new Error('Missing key'));
      }

      var coll = this.table.where('key').equals(key);
      coll.count(function (count) {
        return count > 0 ? coll.delete() : null;
      }).then(function () {
        return cb();
      }).catch(cb);
    }
  }, {
    key: 'table',
    get: function get() {
      return this.db[this.path];
    }
  }]);

  return IdbBlobStore;
}();

function lastIndex(arr) {
  return arr.length - 1;
}

function last(arr) {
  return arr[lastIndex(arr)];
}

function ensureBuffer(data) {
  return Buffer.isBuffer(data) ? data : Buffer.from(data);
}