'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var path = require('path');
var _write = require('pull-write-file');
var _read = require('pull-file');
var fs = require('fs');
var mkdirp = require('mkdirp');
var defer = require('pull-defer/sink');
var pull = require('pull-stream');

module.exports = function () {
  function FsBlobStore(dirname) {
    _classCallCheck(this, FsBlobStore);

    this.path = dirname;
  }

  _createClass(FsBlobStore, [{
    key: 'write',
    value: function write(key, cb) {
      cb = cb || function () {};

      var d = defer();

      if (!key) {
        cb(new Error('Missing key'));
        return d;
      }

      var filename = join(this.path, key);
      mkdirp(path.dirname(filename), function (err) {
        if (err) {
          return cb(err);
        }

        d.resolve(_write(filename, cb));
      });

      return d;
    }
  }, {
    key: 'read',
    value: function read(key) {
      if (!key) {
        return pull.error(new Error('Missing key'));
      }

      return _read(join(this.path, key));
    }
  }, {
    key: 'exists',
    value: function exists(key, cb) {
      cb = cb || function () {};

      if (!key) {
        return cb(new Error('Missing key'));
      }

      fs.stat(join(this.path, key), function (err, stat) {
        if (err && err.code !== 'ENOENT') {
          return cb(err);
        }
        cb(null, Boolean(stat));
      });
    }
  }, {
    key: 'remove',
    value: function remove(key, cb) {
      cb = cb || function () {};

      if (!key) {
        return cb(new Error('Missing key'));
      }

      fs.unlink(join(this.path, key), function (err) {
        if (err && err.code !== 'ENOENT') {
          return cb(err);
        }
        cb();
      });
    }
  }]);

  return FsBlobStore;
}();

function join(root, dir) {
  return path.join(path.resolve(root), path.resolve('/', dir).replace(/^[a-zA-Z]:/, ''));
}