'use strict';

var base58 = require('bs58');
var multihash = require('multihashes');

var urlPattern = /^https?:\/\/[^\/]+\/(ip(f|n)s)\/((\w+).*)/;
var pathPattern = /^\/(ip(f|n)s)\/((\w+).*)/;

function isMultihash(hash) {
  var formatted = convertToString(hash);
  try {
    var buffer = new Buffer(base58.decode(formatted));
    multihash.decode(buffer);
    return true;
  } catch (e) {
    return false;
  }
}

function isIpfs(input, pattern) {
  var formatted = convertToString(input);
  if (!formatted) {
    return false;
  }

  var match = formatted.match(pattern);
  if (!match) {
    return false;
  }

  if (match[1] !== 'ipfs') {
    return false;
  }

  var hash = match[4];
  return isMultihash(hash);
}

function isIpns(input, pattern) {
  var formatted = convertToString(input);
  if (!formatted) {
    return false;
  }
  var match = formatted.match(pattern);
  if (!match) {
    return false;
  }

  if (match[1] !== 'ipns') {
    return false;
  }

  return true;
}

function convertToString(input) {
  if (Buffer.isBuffer(input)) {
    return base58.encode(input);
  }

  if (typeof input === 'string') {
    return input;
  }

  return false;
}

module.exports = {
  multihash: isMultihash,
  ipfsUrl: function ipfsUrl(url) {
    return isIpfs(url, urlPattern);
  },
  ipnsUrl: function ipnsUrl(url) {
    return isIpns(url, urlPattern);
  },
  url: function url(_url) {
    return isIpfs(_url, urlPattern) || isIpns(_url, urlPattern);
  },
  urlPattern: urlPattern,
  ipfsPath: function ipfsPath(path) {
    return isIpfs(path, pathPattern);
  },
  ipnsPath: function ipnsPath(path) {
    return isIpns(path, pathPattern);
  },
  path: function path(_path) {
    return isIpfs(_path, pathPattern) || isIpns(_path, pathPattern);
  },
  pathPattern: pathPattern,
  urlOrPath: function urlOrPath(x) {
    return isIpfs(x, urlPattern) || isIpns(x, urlPattern) || isIpfs(x, pathPattern) || isIpns(x, pathPattern);
  }
};